# Starter pipeline

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: DockerInstaller@0
  inputs:
    dockerVersion: '17.09.0-ce'
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '3.0.100-preview8-013656'
    includePreviewVersions: true
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      docker run --rm -d -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=P@ssword1! mysql
      docker run --rm -d -p 5432:5432 --name postgres -e POSTGRES_PASSWORD=P@ssword1! postgres
      docker run --rm -d -p 1433:1433 --name sqlserver -e ACCEPT_EULA=Y -e SA_PASSWORD=P@ssword1! -e MSSQL_PID=Express mcr.microsoft.com/mssql/server:2017-latest-ubuntu
      docker run --rm -d -p 50000:50000 -itd --name db2 --privileged=true -e LICENSE=accept -e DB2INST1_PASSWORD=P@ssword1! -e DBNAME=testdb ibmcom/db2
- task: DotNetCoreCLI@2
  displayName: build
  inputs:
    command: 'build'
    arguments: '-p:Version=$(Version)'
- task: DotNetCoreCLI@2
  displayName: test
  inputs:
    command: 'test'
- task: DotNetCoreCLI@2
  displayName: pack
  inputs:
    command: 'pack'
    arguments: ' -p:PackageVersion=$(Version)'
    packagesToPack: 'Net.Code.ADONet/**/*.csproj'
    includesymbols: true
    versioningScheme: 'off'
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'